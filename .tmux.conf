# if shell reports 256 colour support, enable it in tmux (default is "screen")
if-shell 'echo $TERM | grep 256' {
    set -g default-terminal "screen-256color"
}

# --------------------------- KEYS -------------------------------------------
# remap prefix from 'C-b' to 'C-a' TODO: consider C-space
unbind C-b
set -g prefix C-a
bind C-a send-prefix # this so that I can send C-a to subprograms (eg screen)

bind | split-window -h -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}" # same key, why not (escaped)
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c '~'
# TODO: consider switching panes with hjkl, resizing with alt + arrows
# defaults are C-arrows - resize by 1
#            Alt-arrows - resize by 5
# switch panes using Alt-arrow without prefix
# DON'T USE PLS
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D
# pane movement shortcuts (same as vim)
# :select-layout -o undoes layout command
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# tmux copy goes to clipboard
# TODO: why doesn't escape exit copy-mode
bind -T copy-mode-vi y send-keys -X copy-pipe-no-clear \
    "xclip -i -sel clip > /dev/null" \; \
    display-message "copied to clipboard"
# paste within tmux
bind o run "xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer"
# Add a key for opening new windows to remote hosts.
# bind h command-prompt -p "SSH to host:" "if-shell '[ -n \"%%\" ]' 'new-window -n \"%1\" \"/usr/bin/ssh %1\"'"

# other (defualts)
# = show a history of copied things and select which one to paste
#   config reload doesn't work. Exit tmux and start with "tmux a"
# :swap-window -t $(num_window)      # swaps window with the one specified

# NOTE: always use "set -g". Tmux will infer whether to apply to
# session/window/server. -g will allow it to be overridable by individual
# instances (don't use -w, -s, setw, set-option; either an alias or will be
# inferred)
# --------------------------- THEME ------------------------------------------
# general colours
# set inactive/active window styles
set -g pane-active-border-style fg=red
# vim sets these so I don't think they are useful. The border should be enough
# set -g window-active-style 'bg=black'
# set -g window-style 'bg=colour233' # 1 shade grey down
# status line
set -g status-interval 1          # how often to update (sec)
set -g status-bg colour50         # Cyan2
set -g status-fg black            # pitch black
set -g status-right-length 45     # max width of right bit of status line
set -g status-right '#H | load: #(cut -d " " -f 1-3 /proc/loadavg) |#[bg=colour160] %d-%m-%y %H:%M:%S #[default]|'
set -g window-status-format '#I:#W#F' # how the window shows up as
set -g window-status-current-style 'bg=colour220' # colour of current window
set -g window-status-separator ' '
set -g automatic-rename on        # set window title (default: current program and some bits)
# title of xterm
set -g set-titles on
set -g set-titles-string "#S:#I:#W"
# --------------------------- MISC -------------------------------------------
set -g escape-time 25            # time in which ESC+key is an escape sequence (ms)
set -g mode-keys vi              # vi mode
set -g monitor-activity off      # (don't) monitor window on activity (TODO: decouple from highlight?)
set -g base-index 0              # number windows from 0
set -g renumber-windows on       # renumber on close
set -g wrap-search off           # don't wrap to start
# set -g default-shell /bin/zsh  # if you can't change default shell

# TODO: mouse; but have to fiddle with bindings so when I release it doesn't exit copy mode
# set -g mouse on

set-option -g default-shell /bin/zsh
# the ssh agent's path changes on each ssh login. Use this symlink which will be
# updated separately
setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock

new-session                      # start a session we can attach to (giving it a name breaks the first window's title)
